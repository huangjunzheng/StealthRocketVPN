// Objective-C API for talking to github.com/Jigsaw-Code/outline-go-tun2socks/outline/tun2socks Go package.
//   gobind -lang=objc github.com/Jigsaw-Code/outline-go-tun2socks/outline/tun2socks
//
// File is generated by gobind. Do not edit.

#ifndef __Tun2socks_H__
#define __Tun2socks_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Shadowsocks.objc.h"

@protocol Tun2socksOutlineTunnel;
@class Tun2socksOutlineTunnel;
@protocol Tun2socksTunWriter;
@class Tun2socksTunWriter;
@protocol Tun2socksTunnel;
@class Tun2socksTunnel;

@protocol Tun2socksOutlineTunnel <NSObject>
- (void)disconnect;
- (BOOL)isConnected;
- (BOOL)updateUDPSupport;
- (BOOL)write:(NSData* _Nullable)data ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

@protocol Tun2socksTunWriter <NSObject>
- (BOOL)close:(NSError* _Nullable* _Nullable)error;
- (BOOL)write:(NSData* _Nullable)p0 n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

@protocol Tun2socksTunnel <NSObject>
- (void)disconnect;
- (BOOL)isConnected;
/**
 * UpdateUDPSupport determines if UDP is supported following a network connectivity change.
Sets the tunnel's UDP connection handler accordingly, falling back to DNS over TCP if UDP is not supported.
Returns whether UDP proxying is supported in the new network.
 */
- (BOOL)updateUDPSupport;
- (BOOL)write:(NSData* _Nullable)data ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ConnectShadowsocksTunnel reads packets from a TUN device and routes it to a Shadowsocks proxy server.
Returns an OutlineTunnel instance that should be used to input packets to the tunnel.

`tunWriter` is used to output packets to the TUN (VPN).
`client` is the Shadowsocks client (created by [shadowsocks.NewClient]).
`isUDPEnabled` indicates whether the tunnel and/or network enable UDP proxying.

Sets an error if the tunnel fails to connect.
 */
FOUNDATION_EXPORT id<Tun2socksTunnel> _Nullable Tun2socksConnectShadowsocksTunnel(id<Tun2socksTunWriter> _Nullable tunWriter, ShadowsocksClient* _Nullable client, BOOL isUDPEnabled, NSError* _Nullable* _Nullable error);

// skipped function NewTCPHandler with unsupported parameter or return types


// skipped function NewUDPHandler with unsupported parameter or return types


@class Tun2socksOutlineTunnel;

@class Tun2socksTunWriter;

@class Tun2socksTunnel;

/**
 * Deprecated: use Tunnel directly.
 */
@interface Tun2socksOutlineTunnel : NSObject <goSeqRefInterface, Tun2socksOutlineTunnel> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)disconnect;
- (BOOL)isConnected;
- (BOOL)updateUDPSupport;
- (BOOL)write:(NSData* _Nullable)data ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * TunWriter is an interface that allows for outputting packets to the TUN (VPN).
 */
@interface Tun2socksTunWriter : NSObject <goSeqRefInterface, Tun2socksTunWriter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)close:(NSError* _Nullable* _Nullable)error;
- (BOOL)write:(NSData* _Nullable)p0 n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Tunnel represents a tunnel from a TUN device to a server.
 */
@interface Tun2socksTunnel : NSObject <goSeqRefInterface, Tun2socksTunnel> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)disconnect;
- (BOOL)isConnected;
/**
 * UpdateUDPSupport determines if UDP is supported following a network connectivity change.
Sets the tunnel's UDP connection handler accordingly, falling back to DNS over TCP if UDP is not supported.
Returns whether UDP proxying is supported in the new network.
 */
- (BOOL)updateUDPSupport;
- (BOOL)write:(NSData* _Nullable)data ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

#endif
